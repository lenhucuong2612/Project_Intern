<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.springtestsecurity.mapper.UserMapper">

    <!-- Truy vấn người dùng theo id -->
    <select id="findUserName" parameterType="String" resultType="com.example.springtestsecurity.entity.User">
        SELECT username, create_time, password, id
        FROM users
        WHERE username = #{username}
    </select>
    <insert id="insertUser" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (username, password, create_time, role_id)
        VALUES (#{username}, #{password}, CURRENT_DATE,#{role.id})
    </insert>
    <select id="checkLogin" parameterType="String" resultType="com.example.springtestsecurity.entity.User">
        SELECT username,password
        FROM users
        WHERE username = #{username}
    </select>
    <update id="updateUser" parameterType="map">
        UPDATE users
        SET
        username = #{userRequestUpdate.username}
        <if test="userRequestUpdate.password != null and userRequestUpdate.password != ''">
            , password = #{userRequestUpdate.password}
        </if>
        WHERE id = #{userRequestUpdate.id}
    </update>

    <update id="updateUserByName" parameterType="map">
        UPDATE users
        SET username = #{userNameRequest.username}
        WHERE id = #{id}
    </update>
    <select id="checkUserById" parameterType="Long" resultType="com.example.springtestsecurity.entity.User">
        SELECT username,password
        FROM users
        WHERE id=#{id}
    </select>

    <select id="checkExitsUserById" parameterType="map" resultType="com.example.springtestsecurity.entity.User">
        SELECT username
        FROM users
        WHERE id!=#{id} and username=#{username}
    </select>
    <select id="findRoleUser" parameterType="map" resultType="com.example.springtestsecurity.entity.Role">
        select id
        from roles
        where name=#{name}
    </select>
    <delete id="deleteUserByName" parameterType="String">
        delete from users where username=#{username}
    </delete>
    <select id="findUser" parameterType="map" resultType="com.example.springtestsecurity.response.UserResponse">
        select id,username,create_time, row_number() over (order by id) as "index"
        from users
       <where>
           <if test="username!=null and username != ''">
               username LIKE CONCAT('%', #{username}, '%')
           </if>
           <if test="start_time!=null and start_time != ''" >
               <if test="username != null and username != ''">
                   and
               </if>
               create_time <![CDATA[>=]]> to_timestamp(#{start_time},'yyyy-MM-dd')
           </if>
           <if test="end_time!=null and end_time!=''">
               <if test="start_time != null and start_time != '' or username != null and username != ''">
                   AND
               </if>
               create_time <![CDATA[<=]]> to_timestamp(#{end_time},'yyyy-MM-dd')
           </if>
       </where>
        <if test="username != null or start_time != null or end_time != null">
            ORDER BY id
            limit #{limit} offset #{offset}
        </if>
    </select>
    <select id="countUsers" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM users
        <where>
            <if test="username != null and username != ''">
                username LIKE CONCAT('%', #{username}, '%')
            </if>
            <if test="start_time != null and start_time != ''">
                <if test="username != null and username != ''">
                    AND
                </if>
                create_time <![CDATA[>=]]> to_timestamp(#{start_time}, 'yyyy-MM-dd')
            </if>
            <if test="end_time != null and end_time != ''">
                <if test="start_time != null and start_time != '' or username != null and username != ''">
                    AND
                </if>
                create_time <![CDATA[<=]]> to_timestamp(#{end_time}, 'yyyy-MM-dd')
            </if>
        </where>
    </select>

    <select id="findRoleByUsername" parameterType="map" resultType="boolean">
        select exists(
                       select *
                       from roles r
                                inner join users u on u.role_id = r.id
                       where u.username = #{username}
                         <if test="role == 'can_create'">
                             AND can_create is true
                         </if>
                            <if test="role == 'can_update'">
                                AND can_update is true
                            </if>
                            <if test="role == 'can_delete'">
                                AND can_delete is true
                            </if>
                   )
    </select>
    <select id="listUser" resultType="com.example.springtestsecurity.request.ListUser">
        SELECT id,username, create_time
        FROM users
        order by id
        limit #{limit} offset #{offset}
    </select>
    <insert id="insertRole" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (can_create, can_update, can_delete, name)
        VALUES (false , false, false,#{name})
    </insert>


    <update id="sendOtp" parameterType="map">
        UPDATE users
        SET otp = #{otp}
        WHERE username = #{username}
    </update>

    <update id="changePasswordUser" parameterType="map">
        UPDATE users
        SET password = #{userChangePassword.password}
        WHERE username = #{userChangePassword.username} and otp = #{userChangePassword.otp}
    </update>
    <select id="checkUserNameAndToken" parameterType="map" resultType="int">
        select * from users
        WHERE username = #{userChangePassword.username} and otp = #{userChangePassword.otp}
    </select>

</mapper>